#!/usr/bin/env python3
"""Comprehensive memory functionality test to ensure it's rock solid."""

import asyncio
import sys

sys.path.insert(0, "src")

from src.memory import MemoryType
from src.memory.manager import MemoryManager
from src.utils.logger import setup_logger

logger = setup_logger(__name__)


async def test_comprehensive_memory():
    """Comprehensive test of all memory operations with error handling."""
    print("\nüß† COMPREHENSIVE MEMORY SYSTEM TEST")
    print("=" * 60)

    # Initialize memory manager
    print("\n1Ô∏è‚É£ Initializing Memory Manager...")
    try:
        memory_manager = MemoryManager()
        print("   ‚úÖ Memory manager initialized successfully")
    except Exception as e:
        print(f"   ‚ùå Failed to initialize: {e}")
        return False

    # Clear any existing memories for clean test
    print("\nüßπ Clearing existing memories for clean test...")
    try:
        await memory_manager.clear_memories()
        print("   ‚úÖ Memory cleared")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Clear failed: {e}")

    # Test 1: Memory Storage
    print("\n2Ô∏è‚É£ Testing Memory Storage...")
    memory_ids = []

    # Store various types of memories
    test_memories = [
        (
            "Python is great for AI",
            MemoryType.SHORT_TERM,
            0.6,
            {"category": "programming", "tags": ["python", "ai"]},
        ),
        (
            "Machine learning needs data",
            MemoryType.LONG_TERM,
            0.8,
            {"category": "ml", "tags": ["data", "ml"]},
        ),
        (
            "Today I learned about neural networks",
            MemoryType.EPISODIC,
            0.7,
            {"event": "learning", "tags": ["neural", "learning"]},
        ),
        (
            "Deep learning uses neural networks",
            MemoryType.SEMANTIC,
            0.9,
            {"concept": "deep_learning", "tags": ["deep", "neural"]},
        ),
        (
            "I had coffee this morning",
            MemoryType.SHORT_TERM,
            0.3,
            {"event": "daily", "tags": ["coffee", "morning"]},
        ),
    ]

    for content, mem_type, importance, metadata in test_memories:
        try:
            memory_id = await memory_manager.remember(
                content=content, memory_type=mem_type, importance=importance, metadata=metadata
            )
            memory_ids.append((memory_id, mem_type, content))
            print(f"   ‚úÖ Stored {mem_type.value}: {content[:30]}...")
        except Exception as e:
            print(f"   ‚ùå Failed to store {mem_type.value}: {e}")
            return False

    print(f"   üìù Total memories stored: {len(memory_ids)}")

    # Test 2: Memory Recall with Different Queries
    print("\n3Ô∏è‚É£ Testing Memory Recall...")

    test_queries = [
        ("python programming", ["python", "ai"], 0.4),
        ("machine learning", ["ml", "data", "neural"], 0.4),
        ("coffee morning", ["coffee", "morning"], 0.4),
        ("neural networks", ["neural", "deep"], 0.4),
        ("completely unrelated query about space travel", [], 0.7),
    ]

    for query, expected_tags, threshold in test_queries:
        try:
            results = await memory_manager.recall(query=query, threshold=threshold, limit=10)
            print(f"   üîç Query: '{query}' -> Found {len(results)} memories")

            # Check if results contain expected content
            found_expected = False
            for memory in results:
                memory_tags = memory.metadata.get("tags", [])
                if any(tag in memory_tags for tag in expected_tags):
                    found_expected = True
                    break

            if expected_tags and not found_expected and len(results) == 0:
                print(f"      ‚ö†Ô∏è  Expected to find memories with tags {expected_tags}")
            elif expected_tags and found_expected:
                print("      ‚úÖ Found relevant memories")
            elif not expected_tags and len(results) == 0:
                print("      ‚úÖ Correctly found no relevant memories")

        except Exception as e:
            print(f"   ‚ùå Recall failed for '{query}': {e}")
            return False

    # Test 3: Memory Filtering by Type
    print("\n4Ô∏è‚É£ Testing Memory Type Filtering...")

    for memory_type in MemoryType:
        try:
            results = await memory_manager.recall(
                query="",  # Empty query to get all
                memory_types=[memory_type],
                threshold=0.0,
                limit=100,
            )
            print(f"   üìä {memory_type.value}: {len(results)} memories")
        except Exception as e:
            print(f"   ‚ùå Type filtering failed for {memory_type}: {e}")
            return False

    # Test 4: Memory Update
    print("\n5Ô∏è‚É£ Testing Memory Update...")
    if memory_ids:
        try:
            # Get a memory and update it
            memory_id, _, original_content = memory_ids[0]
            memories = await memory_manager.recall(query=original_content, threshold=0.1, limit=1)

            if memories:
                memory = memories[0]
                memory.importance = 0.95
                memory.metadata["updated"] = True
                memory.metadata["tags"] = ["updated", "test"]

                # Update using the store's update method
                success = await memory_manager.store.update(memory)

                if success:
                    print("   ‚úÖ Memory updated successfully")
                else:
                    print("   ‚ùå Memory update failed")
            else:
                print("   ‚ö†Ô∏è  No memory found to update")

        except Exception as e:
            print(f"   ‚ùå Update failed: {e}")
            return False

    # Test 5: Memory Statistics
    print("\n6Ô∏è‚É£ Testing Memory Statistics...")
    try:
        stats = await memory_manager.get_memory_stats()
        print(f"   üìä Total memories: {stats.get('total', 0)}")
        print(f"   üìä Average importance: {stats.get('avg_importance', 0):.2f}")

        for mem_type, count in stats.get("by_type", {}).items():
            print(f"   üìä {mem_type}: {count} memories")

        print("   ‚úÖ Statistics retrieved successfully")
    except Exception as e:
        print(f"   ‚ùå Statistics failed: {e}")
        return False

    # Test 6: Memory Consolidation
    print("\n7Ô∏è‚É£ Testing Memory Consolidation...")
    try:
        await memory_manager.consolidate()
        print("   ‚úÖ Memory consolidation completed")
    except Exception as e:
        print(f"   ‚ùå Consolidation failed: {e}")
        return False

    # Test 7: Individual Memory Deletion
    print("\n8Ô∏è‚É£ Testing Memory Deletion...")
    if memory_ids:
        try:
            memory_id, _, content = memory_ids[-1]  # Delete last memory
            success = await memory_manager.forget(memory_id)
            if success:
                print(f"   ‚úÖ Deleted memory: {content[:30]}...")
            else:
                print("   ‚ùå Memory deletion failed")
        except Exception as e:
            print(f"   ‚ùå Deletion failed: {e}")
            return False

    # Test 8: Error Handling
    print("\n9Ô∏è‚É£ Testing Error Handling...")
    try:
        # Test with invalid memory ID
        success = await memory_manager.forget("invalid-id-12345")
        print(f"   ‚úÖ Invalid deletion handled gracefully: {success}")

        # Test recall with invalid type
        results = await memory_manager.recall(query="test", threshold=2.0)  # Invalid threshold
        print(f"   ‚úÖ Invalid threshold handled: found {len(results)} memories")

    except Exception as e:
        print(f"   ‚ùå Error handling test failed: {e}")
        return False

    # Final Statistics
    print("\nüîü Final Memory Statistics...")
    try:
        final_stats = await memory_manager.get_memory_stats()
        print(f"   üìä Final total: {final_stats.get('total', 0)} memories")
        print("   ‚úÖ Memory system is fully operational")
    except Exception as e:
        print(f"   ‚ùå Final stats failed: {e}")
        return False

    print("\n" + "=" * 60)
    print("üéØ COMPREHENSIVE TEST RESULTS")
    print("=" * 60)
    print("‚úÖ Memory storage works perfectly")
    print("‚úÖ Memory recall with semantic search works")
    print("‚úÖ Memory type filtering works")
    print("‚úÖ Memory updates work")
    print("‚úÖ Memory statistics work")
    print("‚úÖ Memory consolidation works")
    print("‚úÖ Memory deletion works")
    print("‚úÖ Error handling is robust")
    print("‚úÖ All memory functionality is ROCK SOLID!")

    return True


if __name__ == "__main__":
    print("Starting comprehensive memory system tests...")
    success = asyncio.run(test_comprehensive_memory())

    if success:
        print("\nüöÄ ALL TESTS PASSED - MEMORY SYSTEM IS ROCK SOLID!")
        exit(0)
    else:
        print("\nüí• SOME TESTS FAILED - NEEDS ATTENTION")
        exit(1)
